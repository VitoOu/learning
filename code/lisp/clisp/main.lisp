(write-line "hello world")
(write-line "this is a learning example")
;( i am a list)
(write '(* 2 3))
(write (* 2 3))
(setq x 10)
(print x)
(write (* 2 x))
(defvar x 10)
(print (type-of x))
(defmacro setToTen(num)
(setq num 100)(print num))
(setq x 25)
(print x)
(setToTen x)
(defvar xx 234)
(write xx)
(setq a 10)
(setq b 20)
(format t "x = ~2d y = ~2d ~%" a b)
(let ((x) (y 'b)(z 'c))
(format t "x =~a y=~a z=~a" x y z))
(prog ((x '(a b c )) (y '(1 2 3)) (z '(p q 10)))
(format t "x=~a y=~a z=~a" x y z))
(defconstant PI 3.1415926)
(defun area-circle(rad)
    (terpri)
    (format t "Radius: ~5f" rad)
    (format t "~%Area: ~10f" (* PI rad rad)))
(area-circle 10)
(setq x 10)
(setq y 20)
(print (/ x y))
(print (/ y x))
(setq a 10)
(cond ((> a 20)
    (format t "~% a is greater than 20 "))
    (t (format t "~% value of a is ~d " a)))
(if (> a 20)
    (format t "~% a is less than 20"))
(format t "~% value of a is ~d " a)
(if (> a 20)
    then (format t "~% a is less than 20"))
(format t "~% value of a is ~d" a)
(if (> a 20)
    (format t "~% a is greater than 20")
    (format t "~% a is less than 20"))
(if (< a 20)
    (format t "~% a is not greater than 20"))
(setq day 4)
(case day
(1 (format t "~% Monday"))
(4 ( format t "~% Tues")))
(loop 
    (setq a (+ a 1))
    (write a)
    (terpri)
    (when (> a 17) (return a))
)

(write "hello")
(setq a 10)
(loop
	(setq a (+ a 1))
	(write a)
	(terpri)
	(when (> a 17) (return a))
)

(loop for x in '(tom dick harry)
	do (format t " ~s" x)
)

(loop for a from 10 to 20
	do (print a)
)
(write-line "-------")
(loop for x from 1 to 20
	if(evenp x)
	do (print x)
)

(do ((x 0 (+ 2 x))
	(y 20 ( - y 2)))
	((= x y) (- x y))
	(format t "~% x = ~d y = ~d" x y)
)

(write-line "")

(dotimes (n 11)
	(print n) (prin1 (* n n ))
)

(dolist (n '(1 2 3 4 5 6 7 8 9))
	(format t "~% Number: ~d Square: ~d" n (* n n))
)

(write-line "")

(defun demo-function (flag)
	(print 'entering-outer-block)

	(block outer-block
		(print 'entering-inner-block)
		(print (block inner-block

			(if flag
				(return-from outer-block 3)
				(return-from inner-block 5)
			)
			
			(print 'This-will--not-be-printed))
		)
		
		(print 'left-inner-block)
		(print 'leaving-outer-block)
	t)
)
(demo-function t)
(terpri)
(demo-function nil)

(terpri)
(defun averagenum (n1 n2 n3 n4)
	(/ (+ n1 n2 n3 n4) 4)
)
(write(averagenum 10 20 30 40))

(defun area-circle(rad)
	"Calculates area of a circle with given radius"
	(terpri)
	(format t "Radius: ~5f" rad)
	(format t "~%Area: ~10f" (* 3.141592 rad rad))
)
(area-circle 10)

(terpri)
(defun show-members (a b &optional c d) (write (list a b c d)))
(show-members 1 2 3)
(terpri)
(show-members 'a 'b 'c 'd)
(terpri)
(show-members 'a 'b)
(terpri)
(show-members 1 2 3 4)
(write-line "------------------")
(defun show-members (a b &rest values) (write (list a b values)))
(show-members 1 2 3)
(terpri)
(show-members 'a 'b 'c 'd)
(terpri)
(show-members 'a 'b)
(terpri)
(show-members 1 2 3 4)
(terpri)
(show-members 1 2 3 4 5 6 7 8 9)

(terpri)
(defun show-members (&key a b c d) (write (list a b c d)))
(show-members :a 1 :c 2 :d 3)
(terpri)
(show-members :a 'p :b 'q :c 'r :d 's)
(terpri)
(show-members :a 'p :d 'q)
(terpri)
(show-members :a 1 :b 2)
(terpri)

(defun add-all( a b c d)
	(+ a b c d)
)
(setq sum (add-all 10 20 30 40))
(write sum)
(terpri)
(write (add-all 23.4 56.7 34.9 10.0))
(terpri)

(defun myfunc (num)
	(return-from myfunc 10)
	num
)
(write (myfunc 20))
(terpri)

(defun myfunc (num)
	(return-from myfunc 10)
	write num
)
(write (myfunc 20))
(terpri)

(defun myfunc (num)
	(return-from myfunc num)
	num
)
(write (myfunc 20))
(terpri)

(write ((lambda ( a b c x)
	(+ (* a (* x x)) (* b x) c))
	4 2 9 3)
)
(terpri)

(write (mapcar '1+ '(23 34 45 56 67 78 89)))
(terpri)

(defun cubeMylist(lst)
	(mapcar #'(lambda(x) (* x x x)) lst)
)
(write (cubeMylist '(2 3 4 5 6 7 8 9)))
(terpri)

(write (mapcar '+ '(1 3 5 7 9 11 13) '(2 4 6 8)))
(terpri)


(write (atom 'abcd))
(terpri)
(write (equal 'a 'b))
(terpri)
(write (evenp 10))
(terpri)
(write (evenp 7))
(terpri)
(write (oddp 7))
(terpri)
(write (zerop 0.00000000000001))
(terpri)
(write (eq 3 3.0))
(terpri)
(write (equal 3 3.0))
(terpri)
(write (eql 3 3.0))
(terpri)
(write (null nil))
(terpri)
(defun factorial (num)
	(cond ((zerop num) 1)
		(t (* num (factorial (- num 1))))
	)
)
(setq n 6)
(format t "~% Factorial ~d is: ~d" n (factorial n))
(terpri)
(write (/ 1 2))
(terpri)
(write ( + (/ 1 2 ) (/ 3 4)))
(terpri)
(write (+ #c(1 2) #c(3 -4)))
(terpri)
(write (/ 45 78))
(terpri)
(write (floor 45 78))
(terpri)
(write ( / 3456 75))
(terpri)
(write (floor 3456 75))
(terpri)
(write ( ceiling 3456 75))
(terpri)
(write (truncate 3456 75))
(terpri)
(write (round 3456 75))
(terpri)
(write (ffloor 3456 75))
(terpri)
(write (fceiling 3456 75))
(terpri)
(write (ftruncate 3456 75))
(terpri)
(write (fround 3456 75))
(terpri)
(write (mod 3456 75))
(terpri)
(setq c (complex 6 7 ))
(write c)
(terpri)
(write (complex 5 -9))
(terpri)
(write (realpart c))
(terpri)
(write (imagpart c))
(terpri)
(write 'a)
(terpri)
(write #\a)
(terpri)
(write-char #\a)
(terpri)
;(write-char 'a) -- argument A is not a characer -- it is not a character object
(terpri)
(write-char #\Backspace)
(terpri)
(write-char #\Tab)
(terpri)
(write-char #\Linefeed)
(terpri)
(write-char #\Page)
(terpri)
(write-char #\Return)
(terpri)
(write-char #\Rubout)
(terpri)
(write (char= #\a #\b))
(terpri)
(write (char= #\a #\a))
(terpri)
(write (char= #\a #\A))
(terpri)

(write (char-equal #\a #\A))
(terpri)
(write (char-equal #\a #\b))
(terpri)
(write (char-lessp #\a #\b #\c))
(terpri)
(write (char-greaterp #\a #\b #\c))
(terpri)
(setf my-array (make-array '(10)))
(terpri)
(write (aref my-array 9))
(terpri)
(write (setf my-array (make-array '(10))))
(terpri)
(setf (aref my-array 0) 25)
(setf (aref my-array 1) 23)
(write my-array)
(terpri)
(write (aref my-array 1))
(terpri)
(setf x (make-array '(3 3)
	:initial-contents '((0 1 2) (3 4 5)(6 7 8)))
)
(write x)
(terpri)
(setq a (make-array '(4 3)))
(dotimes (i 4)
	(dotimes (j 3)
		(setf (aref a i j ) (list i 'x j '= (* i j)))
	)
)
(dotimes (i 4)
	(dotimes (j 3)
		(print (aref a i j))
	)
)
(terpri)
(setq myarray (make-array '(3 2 3)
	:initial-contents
	'(((a b c ) (1 2 3))
		((d e f ) (4 5 6))
		((g h i ) (7 8 9))
	))
)
(setq array2 (make-array 4 :displaced-to myarray :displaced-index-offset 2))
(write myarray)
(terpri)
(write array2)
(terpri)
(setq array3 (make-array '(3 2) :displaced-to myarray :displaced-index-offset 5))
(write array3)
(terpri)
(write (make-array 5 :initial-element 5))
(terpri)

(write (make-array '(2 3) :initial-element 'a))
(terpri)
(write (length (make-array 14 :fill-pointer 5)))
(terpri)
(write (array-dimensions (make-array 14 :fill-pointer 5)))
(terpri)
(write (make-array 10 :element-type 'bit :initial-element 1))
(terpri)
(write (make-array 10 :element-type 'character :initial-element #\a))
(terpri)
(setq myarray (make-array '(2 2) :initial-element 'a :adjustable t))
(write myarray)
(terpri)

(adjust-array myarray '(1 3) :initial-element 'b)
(write myarray)
(terpri)
(write-line "welcome to \"Tuto P\"\\")
(terpri)
(write (string= "this is test" "This is test"))
(terpri)
(write (string> "this is test" "This is test"))
(terpri)
(write (string< "this is test" "This is test"))
(terpri)

(write (string-equal "this is test" "This is test"))
(terpri)
(write (string-greaterp "this is test" "This is test"))
(terpri)
(write (string-lessp "this is test" "This is test"))
(terpri)
(write (string/= "this is test" "this is Test"))
(terpri)
(write (string-not-equal "this is test" "This is test"))
(terpri)
(write (string/= "lisp" "lisping"))
(terpri)
(write (string/= "decent" "decency"))
(terpri)
(write-line (string-upcase "a big hello fro tp"))
(write-line (string-capitalize "a big ehllo from tp"))
(terpri)
(write-line (string-trim " " " a big hello from tp    "))
(write-line (string-left-trim " " " a big hello from tp    "))
(write-line (string-right-trim " " " a bing hello from tp   "))
(write-line (string-trim " a" "      a bing hello from tp    "))
(write (length "Hello world"))
(terpri)
(write-line (subseq "Hello World" 6))
(write-line (subseq "Hello World" 6 8))
(write (char "Hello World" 6))
(terpri)
(write (sort (vector "Amal" "Akbar" "Anthony") #'string<))
(terpri)
(write (merge 'vector (vector "Rishi" "Zara" "Priyanka") (vector "Anju" "Anuj" "Avni") #'string<))
(terpri)
(write-line (reverse "Are we not draw onward, we few, drawn onward to new era"))
(write-line (concatenate 'string "Are we not drawn onward, " "we few, drawn onward to new era"))
(write (make-sequence '(vector float)
	10
	:initial-element 1.0))
(terpri)




